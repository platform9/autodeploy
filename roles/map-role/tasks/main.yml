---

# default facts (can be over-ridden by using extra-vars)
- set_fact:
    NEUTRON_AGENT_MODE: "dvr_snat"
  when: NEUTRON_AGENT_MODE is undefined

- set_fact:
    NOVA_BRIDGE_MAPPING: "external:br-pf9"
  when: NOVA_BRIDGE_MAPPING is undefined

- set_fact:
    NOVA_INSTANCES_PATH: "/opt/pf9/data/instances/"
  when: NOVA_INSTANCES_PATH is undefined

- set_fact:
    NOVA_DNSMASQ_DNS_SERVERS: "8.8.8.8"
  when: NOVA_DNSMASQ_DNS_SERVERS is undefined

# discovered facts
- set_fact:
    NOVA_CLUSTER_IP: "{{ha_cluster_ip}}"
    PF9_NOVNCPROXY_BASE_URL: "http://{{ha_cluster_ip}}:6080/vnc_auto.html"
    NOVA_DNS_DOMAIN: "{{nova_dns_domain}}"
  when: rolename != "pf9-kube"

- name: validate pf9/host_id.conf
  stat:
    path: /etc/pf9/host_id.conf
  register: stat_hostid

- fail: msg="failed to open /etc/pf9/host_id.conf"
  when: stat_hostid.stat.exists == false

- name: get host_id
  shell: cat /etc/pf9/host_id.conf | grep ^host_id | cut -d = -f2 | cut -d ' ' -f2
  register: host_id

- set_fact:
    role_metadata: "/tmp/{{inventory_hostname}}.{{rolename}}.json"

- name: prepare role json data
  template:
    src: "{{rolename}}.j2"
    dest: "{{role_metadata}}"
  delegate_to: localhost

- name: validate required role params (sourced from inventory)
  fail: msg="role 'pf9-kube' is missing required parameter - 'pf9_clusterName'"
  when: rolename == "pf9-kube" and pf9_clusterName is undefined
    
- name: validate required role params (sourced from inventory)
  fail: msg="role 'pf9-kube' is missing required parameter - 'pf9_clusterFqdn'"
  when: rolename == "pf9-kube" and pf9_clusterFqdn is undefined
    
- name: initialize role_params to null
  set_fact:
    role_params: ""
  when: rolename != "pf9-kube"

- name: assign role_params for pf9-kube role
  set_fact:
    role_params: "--clusterName {{pf9_clusterName}} --clusterFqdn {{pf9_clusterFqdn}}"
  when: rolename == "pf9-kube"

- debug: msg="executing map-role.sh {{ctrl_ip}} {{rolename}} {{host_id.stdout.strip()}} {{du_username}} {{du_password}} {{role_params}}"

- name: "Assigning Role - {{rolename}}"
  script: "map-role.sh {{ctrl_ip}} {{rolename}} {{role_metadata}} {{host_id.stdout.strip()}} {{du_username}} {{du_password}} {{role_params}}"
  delegate_to: localhost
  register: rolemap_log

- debug: var=rolemap_log.stdout_lines
