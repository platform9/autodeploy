---
################################################################################
# Dynamically-Assigned Role Values (static values are initialized in inventory)
################################################################################
# glance_endpoint_address
- block:
  - set_fact:
      glance_endpoint_address: "{{ha_cluster_ip}}"

  # neutron_l3_agent_mode
  - set_fact:
      neutron_l3_agent_mode: "dvr_snat"
    when: dvr == "on" and snat == "on"
  - set_fact:
      neutron_l3_agent_mode: "dvr"
    when: dvr == "on" and snat == "off"
  - set_fact:
      neutron_l3_agent_mode: "dvr"
    when: neutron_l3_agent_mode is undefined

  # neutron_ovs_enable_distributed_routing
  - set_fact:
      neutron_ovs_enable_distributed_routing: "True"
    when: dvr == "on"
  - set_fact:
      neutron_ovs_enable_distributed_routing: "False"
    when: dvr == "off"
  - set_fact:
      neutron_ovs_enable_distributed_routing: "True"
    when: dvr is undefined

  # neutron_novncproxy_base_url
  - set_fact:
      neutron_novncproxy_base_url: "http://{{ha_cluster_ip}}:6080/vnc_auto.html"
    when: neutron_novncproxy_base_url is undefined
  when: rolename != "pf9-kube"

################################################################################
# Configure Role Metadata
################################################################################
- name: validate pf9/host_id.conf
  stat:
    path: /etc/pf9/host_id.conf
  register: stat_hostid

- fail: msg="failed to open /etc/pf9/host_id.conf"
  when: stat_hostid.stat.exists == false

- name: get host_id
  shell: cat /etc/pf9/host_id.conf | grep ^host_id | cut -d = -f2 | cut -d ' ' -f2
  register: host_id

- set_fact:
    role_metadata: "/tmp/{{inventory_hostname}}.{{rolename}}.json"

# Build template JSON
- name: prepare role json data
  template:
    src: "{{rolename}}.j2"
    dest: "{{role_metadata}}"
  delegate_to: localhost

# Enforce required role parameters
- name: validate required role params (sourced from inventory)
  fail: msg="role 'pf9-kube' is missing required parameter - 'cluster_name'"
  when: rolename == "pf9-kube" and cluster_name is undefined
    
- name: validate required role params (sourced from inventory)
  fail: msg="role 'pf9-kube' is missing required parameter - 'cluster_fqdn'"
  when: rolename == "pf9-kube" and cluster_fqdn is undefined
    
- name: initialize role_params to null
  set_fact:
    role_params: ""
  when: rolename != "pf9-kube"

- name: assign role_params for pf9-kube role
  set_fact:
    role_params: "--clusterName {{cluster_name}} --clusterFqdn {{cluster_fqdn}}"
  when: rolename == "pf9-kube"

- name: initialize proxy_params to null
  set_fact: 
    proxy_params: ""
  when: proxy_url is undefined

- name: initialize proxy_params
  set_fact: 
    proxy_params: "--proxy {{proxy_url}}"
  when: proxy_url is defined

- debug: msg="executing map-role.sh {{ctrl_ip}} {{rolename}} {{host_id.stdout.strip()}} {{du_username}} {{du_password}} {{role_params}} {{proxy_params}}"

################################################################################
# Apply Role to Server
################################################################################
- name: "Assigning Role - {{rolename}}"
  script: "map-role.sh {{ctrl_ip}} {{rolename}} {{role_metadata}} {{host_id.stdout.strip()}} {{du_username}} {{du_password}} {{role_params}} {{proxy_params}}"
  delegate_to: localhost
  register: rolemap_log

- debug: var=rolemap_log.stdout_lines
