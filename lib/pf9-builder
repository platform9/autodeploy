#!/bin/bash

basedir=$(dirname $0)
network_args=""
provider=openstack
instances=""

usage() {
  echo "Usage: `basename $0` [--nova] <csv-file>"
  exit 1
}

assert() {
  if [ $# -eq 1 ]; then
    echo -e "ASSERT : ${1}"
  else
    echo -e "ASSERT : "
  fi
  exit 1
}

# process optional args
while [ $# -gt 0 ]; do
  case ${1} in
  --nova)
    provider=nova
    shift
    ;;
  *)
    break
    ;;
  esac
done

# validate command line
if [ $# -ne 1 ]; then usage; fi
csv_file=${1}
if [ ! -r ${csv_file} ]; then assert "cannot open csv file: ${csv_file}"; fi

# Build OpenStack Instances
echo -e "\nLAUNCHING OPENSTACK INSTANCES"
printf "%-5s %-20s %-40s %-20s %-40s %-20s %-10s\n" \
        "-----" "--------------------" "----------------------------------------" "--------------------" \
        "----------------------------------------" "--------------------" "--------------------"
printf "%-5s %-20s %-40s %-20s %-40s %-20s %-10s\n" \
      "JobID" "Hostname" "Image" "Flavor" "Network" "Security Group" "SSH Key"
printf "%-5s %-20s %-40s %-20s %-40s %-20s %-10s\n" \
        "-----" "--------------------" "----------------------------------------" "--------------------" \
        "----------------------------------------" "--------------------" "--------------------"

# process csv file
source ${basedir}/../pf9-openstack.rc
min_fields=6
while read line; do
  # skip comments and blank lines
  if [ "${line:0:1}" == "#" -o -z "${line}" ]; then continue; fi

  # parse/validate csv
  IFS="|"; lineArgs=(${line})
  if [ ${#lineArgs[@]} -lt ${min_fields} ]; then assert "invalid line format: expected at least ${min_fields} - got ${#lineArgs[@]}"; fi

  # parse network string
  IFS=","; networks=(${lineArgs[3]})

  # build instance
  printf "%-5s %-20s %-40s %-20s %-40s %-20s %-10s\n" \
      "${job_id}" "${lineArgs[0]}" "${lineArgs[1]}" "${lineArgs[2]}" "${networks[0]}" "${lineArgs[5]}" "${lineArgs[4]}"

  n=0
  for network in "${networks[@]}"; do
    if [ ${n} -eq 0 ]; then
      network_args="--nic net-id='${network}'"
    else
      printf "%-5s %-20s %-40s %-20s %-40s %-20s %-10s\n" \
             "" "" "" "" "${network}" "" ""
      network_args="${network_args} --nic net-id='${network}'"
    fi
    ((n++))
  done

  # build instance using Nova
  case ${provider} in
  openstack)
    eval opentack server create --image '${lineArgs[1]}' --flavor '${lineArgs[2]}' ${network_args} \
         --key-name '${lineArgs[4]}' ${lineArgs[0]} > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "ERROR : instance failed to launch"
      continue
    fi
    ;;
  nova)
    eval nova boot --image '${lineArgs[1]}' --flavor '${lineArgs[2]}' ${network_args} \
         --key-name '${lineArgs[4]}' ${lineArgs[0]} > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "ERROR : instance failed to launch"
      continue
    fi
    ;;
  esac

  # update instances
  if [ -z "${instances}" ]; then
    instances="${lineArgs[0]}"
  else
    instances="${instances} ${lineArgs[0]}"
  fi
done < ${csv_file}

# validate at least one instance to pool
if [ -z "${instances}" ]; then exit 1; fi

# Poll for Instances to Spawn
echo -e "\n[Waiting for Instances to Launch]"
launch_status=0
while [ ${launch_status} -ne 1 ]; do
  launch_status=1
  IFS=" "
  for instance in ${instances}; do
    echo -n "."
    status=$(${basedir}/../openstack-cli server show ${instance} | grep status | cut -d \| -f3 | awk -F ' ' '{print $1}' | awk -F ' ' '{print $1}')
    if [ "${status}" != "ACTIVE" ]; then launch_status=0; fi
  done
done
echo

# Configure Ansible Inventory
echo -e "\n[ CONFIGURING ANSIBLE INVENTORY ]"
echo "--> skipping"

# Run PF9-Express
echo -e "\n[ RUNNING PF9-EXPRESS ]"
echo "--> skipping"

# Exit Cleanly
exit 0

