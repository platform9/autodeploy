#!/bin/bash

basedir=$(dirname $0)
network_args=""
provider=openstack
os_cli=/home/centos/.virtenvs/os_cli/bin/openstack
instances=""
inventory=${basedir}/hosts
tpl_global=${basedir}/template/hosts-global.tpl
tpl_hypervisors=${basedir}/template/hosts-hypervisors.tpl
tpl_glance=${basedir}/template/hosts-glance.tpl
tpl_cinder=${basedir}/template/hosts-cinder.tpl
tpl_ovsconfig=${basedir}/template/hosts-ovsconfig.tpl
host_list=""
flag_launch=1

usage() {
  echo "Usage: `basename $0` [--nova] [-s] <csv-file> <openstack-rc-file>"
  exit 1
}

assert() {
  if [ $# -eq 1 ]; then
    echo -e "ASSERT : ${1}"
  else
    echo -e "ASSERT : "
  fi
  exit 1
}

in_array() {
  if [ $# -eq 0 ]; then return 1; fi

  local key=${1}
  shift; defined_values=("$@")

  for value in "${defined_values[@]}"; do
    if [ "${value}" == "${key}" ]; then return 0; fi
  done

  return 1
}

# process optional args
while [ $# -gt 0 ]; do
  case ${1} in
  --nova)
    provider=nova
    shift
    ;;
  -s)
    flag_launch=0
    shift
    ;;
  *)
    break
    ;;
  esac
done

# validate command line
if [ $# -ne 2 ]; then usage; fi
csv_file=${1}
openstack_rc_file=${2}
if [ ! -r ${csv_file} ]; then assert "cannot open csv file: ${csv_file}"; fi
if [ ! -r ${openstack_rc_file} ]; then assert "cannot open openstack-rc-file: ${openstack_rc_file}"; fi

# setup OpenStack environment
source ${openstack_rc_file}

# Build OpenStack Instances
if [ ${flag_launch} -eq 1 ]; then
  echo -e "\n--- LAUNCHING OPENSTACK INSTANCES ---"
  printf "%-20s %-40s %-20s %-40s %-20s %-10s\n" \
          "--------------------" "----------------------------------------" "--------------------" \
          "----------------------------------------" "--------------------" "--------------------"
  printf "%-20s %-40s %-20s %-40s %-20s %-10s\n" \
        "Hostname" "Image" "Flavor" "Network" "Security Group" "SSH Key"
  printf "%-20s %-40s %-20s %-40s %-20s %-10s\n" \
          "--------------------" "----------------------------------------" "--------------------" \
          "----------------------------------------" "--------------------" "--------------------"

  # process csv file
  min_fields=6
  while read line; do
    # validate csv
    if [ "${line:0:1}" == "#" -o -z "${line}" ]; then continue; fi
    IFS="|"; lineArgs=(${line})
    if [ ${#lineArgs[@]} -lt ${min_fields} ]; then assert "invalid line format: expected at least ${min_fields} - got ${#lineArgs[@]}"; fi
  
    # check if server exists
    eval ${os_cli} server show ${lineArgs[0]} > /dev/null 2>&1
    if [ $? -eq 0 ]; then
      printf "%-20s %-40s %-20s %-40s %-20s %-10s\n" \
             "${lineArgs[0]}" "already exists - skipping" "" "" "" ""
      continue
    fi

    # parse network string
    IFS=","; networks=(${lineArgs[3]})

    # build instance
    printf "%-20s %-40s %-20s %-40s %-20s %-10s\n" \
        "${lineArgs[0]}" "${lineArgs[1]}" "${lineArgs[2]}" "${networks[0]}" "${lineArgs[5]}" "${lineArgs[4]}"

    n=0
    for network in "${networks[@]}"; do
      if [ ${n} -eq 0 ]; then
        network_args="--nic net-id='${network}'"
      else
        printf "%-20s %-40s %-20s %-40s %-20s %-10s\n" \
               "" "" "" "${network}" "" ""
        network_args="${network_args} --nic net-id='${network}'"
      fi
      ((n++))
    done

    # build instance using Nova
    case ${provider} in
    openstack)
      eval openstack server create --image '${lineArgs[1]}' --flavor '${lineArgs[2]}' ${network_args} \
           --key-name '${lineArgs[4]}' ${lineArgs[0]} > /dev/null 2>&1
      if [ $? -ne 0 ]; then
        echo "ERROR : instance failed to launch"
        continue
      fi
      ;;
    nova)
      eval nova boot --image '${lineArgs[1]}' --flavor '${lineArgs[2]}' ${network_args} \
           --key-name '${lineArgs[4]}' ${lineArgs[0]} > /dev/null 2>&1
      if [ $? -ne 0 ]; then
        echo "ERROR : instance failed to launch"
        continue
      fi
      ;;
    esac
  done < ${csv_file}

  # validate at least one instance to pool
  if [ -z "${instances}" ]; then exit 1; fi

  # Poll for Instances to Spawn
  echo -e "--- WAITING FOR INSTANCES TO LAUNCH ---"
  launch_status=0
  while [ ${launch_status} -ne 1 ]; do
    launch_status=1
    IFS=" "
    for instance in ${instances}; do
      echo -n "."
      status=$(${os_cli} server show ${instance} | grep status | cut -d \| -f3 | awk -F ' ' '{print $1}' | awk -F ' ' '{print $1}')
      if [ "${status}" != "ACTIVE" ]; then launch_status=0; fi
    done
  done
  echo

  # Provision Storage
  echo -e "\n--- PROVISIONING STORAGE (Cinder) ---"
  while read line; do
    # validate csv
    if [ "${line:0:1}" == "#" -o -z "${line}" ]; then continue; fi
    IFS="|"; lineArgs=(${line})

    # get assigned IP
    ip=$(${os_cli} server show ${lineArgs[0]} | grep "| addresses" | cut -d \| -f 3 | awk -F ' ' '{print $1}' | cut -d = -f 2)
    if [ -z "${ip}" ]; then
      echo "--> ${lineArgs[0]} : <lookup-failed>"
      continue
    else
      # check for storage mappings
      if [ ${#lineArgs[@]} -eq 9 ]; then
        host_uuid=$(${os_cli} server show ${lineArgs[0]} | grep '| id' | cut -d \| -f 3 | awk -F ' ' '{print $1}')
        IFS=","; volumes=(${lineArgs[8]})
        for colval in "${volumes[@]}"; do
          IFS=":"; volArgs=(${colval})
          echo "create-volume: name=${volArgs[0]}, size=${volArgs[1]} --> ${lineArgs[0]} (uuid=${host_uuid})"
          ${os_cli} volume create --size ${volArgs[1]} ${volArgs[0]} > /dev/null 2>&1
          if [ $? -ne 0 ]; then assert "failed to create volume"; fi
  
          volume_uuid=$(${os_cli} volume show ${volArgs[0]} | grep '| id' | cut -d \| -f 3 | awk -F ' ' '{print $1}')
          ${os_cli} server add volume ${host_uuid} ${volume_uuid} > /dev/null 2>&1
          if [ $? -ne 0 ]; then assert "failed to attach volume"; fi
        done
      fi
    fi
  done < ${csv_file}
fi

# Initialize Inventory (from template)
if [ -r ${inventory} ]; then rm -f ${inventory}; fi
cat ${tpl_global} > ${inventory}
cat ${tpl_hypervisors} >> ${inventory}

# Configure Ansible Inventory
echo -e "\n--- CONFIGURING ANSIBLE INVENTORY ---"
echo "[hypervisors]"
while read line; do
  # validate csv
  if [ "${line:0:1}" == "#" -o -z "${line}" ]; then continue; fi
  IFS="|"; lineArgs=(${line})

  # get assigned IP
  ip=$(${os_cli} server show ${lineArgs[0]} | grep "| addresses" | cut -d \| -f 3 | awk -F ' ' '{print $1}' | cut -d = -f 2)
  if [ -z "${ip}" ]; then
    echo "--> ${lineArgs[0]} : <lookup-failed>"
    continue
  else
    # initialize inventory entry
    inv_entry="${lineArgs[0]} ansible_host=${ip} ansible_user=centos cluster_ip=${ip} vm_console_ip=${ip}"
    IFS=","; kvmArgs=(${lineArgs[6]})

    # check for dhcp
    in_array dhcp "${kvmArgs[@]}"
    if [ $? -eq 0 ]; then
      inv_entry="${inv_entry} dhcp=on"
    fi

    # check for snat
    in_array snat "${kvmArgs[@]}"
    if [ $? -eq 0 ]; then
      inv_entry="${inv_entry} snat=on"
    fi
    echo "${inv_entry}" >> ${inventory}
    echo "${inv_entry}"
  fi

  # update instances
  if [ -z "${instances}" ]; then
    instances="${lineArgs[0]}"
  else
    instances="${instances} ${lineArgs[0]}"
  fi
done < ${csv_file}

echo "[glance]"
cat ${tpl_glance} >> ${inventory}
while read line; do
  # validate csv
  if [ "${line:0:1}" == "#" -o -z "${line}" ]; then continue; fi
  IFS="|"; lineArgs=(${line})

  # get assigned IP
  ip=$(${os_cli} server show ${lineArgs[0]} | grep "| addresses" | cut -d \| -f 3 | awk -F ' ' '{print $1}' | cut -d = -f 2)
  if [ -z "${ip}" ]; then
    echo "--> ${lineArgs[0]} : <lookup-failed>"
    continue
  else
    # check for glance
    IFS=","; kvmArgs=(${lineArgs[6]})
    in_array glance "${kvmArgs[@]}"
    if [ $? -eq 0 ]; then
      in_array glance-public "${kvmArgs[@]}"
      if [ $? -eq 0 ]; then
        inv_entry="${lineArgs[0]} glance_public_endpoint=True"
      else
        inv_entry="${lineArgs[0]} glance_public_endpoint=False"
      fi
      echo "${inv_entry}" >> ${inventory}
      echo "${inv_entry}"
    fi
  fi
done < ${csv_file}

echo "[cinder]"
cat ${tpl_cinder} >> ${inventory}
while read line; do
  # validate csv
  if [ "${line:0:1}" == "#" -o -z "${line}" ]; then continue; fi
  IFS="|"; lineArgs=(${line})

  # get assigned IP
  ip=$(${os_cli} server show ${lineArgs[0]} | grep "| addresses" | cut -d \| -f 3 | awk -F ' ' '{print $1}' | cut -d = -f 2)
  if [ -z "${ip}" ]; then
    echo "--> ${lineArgs[0]} : <lookup-failed>"
    continue
  else
    # check for cinder
    IFS=","; kvmArgs=(${lineArgs[6]})
    in_array cinder "${kvmArgs[@]}"
    if [ $? -eq 0 ]; then
      inv_entry="${lineArgs[0]} cinder_ip=${ip} ${lineArgs[7]}"
      echo "${inv_entry}" >> ${inventory}
      echo "${inv_entry}"
    fi
  fi
done < ${csv_file}

# Run PF9-Express
echo -e "\n--- RUNNING PF9-EXPRESS ---"
IFS=" "
instance_list=$(echo ${instances} | sed -e 's/ /,/g')
echo pf9-express -b -v ${inventory} -a ${instance_list}
eval ${basedir}/../../pf9-express -b -v ${inventory} -a ${instance_list}

# Exit Cleanly
exit 0

